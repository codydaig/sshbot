#!/usr/bin/env node

var clog = require('c.log');
var commander = require('commander');
var r = require('rethinkdb');
var request = require('request');
var xml2js = require('xml2js');

commander.version('0.0.1');

commander
  .command('yo')
  .description('Says Yo')
  .action(function () {
    clog.green('Yo!');
  });

commander
  .command('bart <station>')
  .description('Get\'s current BART departures by Station')
  .action(function (station) {
    request('http://api.bart.gov/api/etd.aspx?cmd=etd&orig=' + station + '&key=MW9S-E7SL-26DU-VV8V&dir=n', function (error, response, body) {
      if (!error && response.statusCode == 200) {
        xml2js.parseString(body, function (err, json) {
          var etd = json.root.station[0].etd;
          for(var i=0; i<etd.length; i++) {
            clog.green(etd[i].abbreviation[0] + ' in ' + etd[i].estimate[0].minutes + ' minutes');
          }
        });
      }
    });
  });

commander
  .command('block <ip>')
  .description('Blocks a specified ip from all HackFoCo Servers.')
  .action(function (ip) {
    r.connect({ host: 'localhost', port: 28015 }, function (err, conn) {
      if(err) throw err;
      r.db('sshbot').table('ipBlocks').insert({ ip: ip }).run(conn, function (err, res) {
        if(err) throw err;
        clog.green('Blocked ' + ip);
        conn.close(function (err) { if (err) throw err; })
      });
    });
  });

commander.parse(process.argv);
